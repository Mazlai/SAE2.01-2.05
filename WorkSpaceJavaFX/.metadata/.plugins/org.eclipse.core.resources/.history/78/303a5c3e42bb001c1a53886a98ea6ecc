package gestclub.view;

import java.net.URL;
import java.util.List;
import java.util.Optional;
import java.util.ResourceBundle;

import gestclub.GestClubApp;
import gestclub.model.Membre;
import javafx.beans.property.ListProperty;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ListView;
import javafx.scene.control.MenuItem;
import javafx.scene.control.SelectionMode;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.scene.control.Alert.AlertType;

public class ListeMembresController implements Initializable {
	
	private Stage dialogStage;
	
	@FXML
	private ListView<Membre> listViewMembres;
	@FXML
	private Button butEditer;
	@FXML
	private Button butSupprimer;
	@FXML 
	private MenuItem menuModifier;
	@FXML 
	private MenuItem menuSupprimer;
	
	private GestClubApp getClubApp;
	
	private final EventHandler<MouseEvent> clickHandler = event -> {
		listClick();
		doubleClick(event);
	};

	public void setDialogStage(Stage dialogStage) {
		this.dialogStage = dialogStage;
		this.dialogStage.setOnCloseRequest(event -> { event.consume(); actionQuitter(); } );
	}
	
	public void setGetClubApp(GestClubApp getClubApp) {
		this.getClubApp = getClubApp;
	}
	
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		listViewMembres.setOnMouseClicked(clickHandler);
	}
	
	public void setListeMembre(ListProperty<Membre> liste) {
		this.listViewMembres.itemsProperty().bindBidirectional(liste);
		/*for (Membre membre : liste) {
			this.listViewMembres.getItems().add(membre);
		}*/
	}

	@FXML
	private void actionNouveau() {
		Membre m = this.getClubApp.showSaisieMembre(null);
		if (m!=null) {
			this.listViewMembres.getItems().add(m);
		}
	}
	
	public void doubleClick(MouseEvent mouseEvent) {
		if(mouseEvent.getButton().equals(MouseButton.PRIMARY)){
            if(mouseEvent.getClickCount() == 2){
                actionEditer();
            }
        }
	}
	
	public void listClick() {
		if(listViewMembres.getSelectionModel().getSelectedItem() == null) {
			menuModifier.setDisable(true);
			menuSupprimer.setDisable(true);
			butEditer.setDisable(true);
			butSupprimer.setDisable(true);
		} else {
			menuModifier.setDisable(false);
			menuSupprimer.setDisable(false);
			butEditer.setDisable(false);
			butSupprimer.setDisable(false);
		}
	}
	
	@FXML
	private void actionEditer() {
		Membre m = this.getClubApp.showSaisieMembre(listViewMembres.getSelectionModel().getSelectedItem());
		if (m!=null) {
			this.listViewMembres.getItems().remove(this.listViewMembres.getSelectionModel().getSelectedItem());
			this.listViewMembres.getItems().add(this.listViewMembres.getSelectionModel().getSelectedIndex(), m);
		}			
	}		
		
	@FXML
	private void actionSupprimer() {
		
		Alert confirmBox = new Alert(AlertType.CONFIRMATION);
		confirmBox.setTitle("Confirmation");
		confirmBox.setHeaderText("Voulez-vous vraiment supprimer " + this.listViewMembres.getSelectionModel().getSelectedItem().getNom() + " " + this.listViewMembres.getSelectionModel().getSelectedItem().getPrenom() + " ?");

		Optional<ButtonType> reponse = confirmBox.showAndWait();
		
		if(reponse.orElse(null) == ButtonType.OK) {
			this.listViewMembres.getItems().remove(this.listViewMembres.getSelectionModel().getSelectedItem());
		} else {
			confirmBox.close();
		}
		
	}
	
	@FXML
	private void actionQuitter() {
		Alert confirmBox = new Alert(AlertType.CONFIRMATION);
		confirmBox.setTitle("Fermeture de l'application");
		confirmBox.setContentText("");
		confirmBox.setHeaderText("Voulez-vous réellement quitter ?");
		confirmBox.initOwner(dialogStage); //Place la fenêtre de fermeture au même endroit que la page de question.
		
		ButtonType bof = new ButtonType("jsp");
		confirmBox.getButtonTypes().add(bof);
		confirmBox.getButtonTypes().add(ButtonType.YES);
		
		Optional<ButtonType> reponse = confirmBox.showAndWait();
		
		if(reponse.orElse(null) == ButtonType.OK) {
			this.dialogStage.close();
		} else {
			confirmBox.close();
		}
	}
	

}
